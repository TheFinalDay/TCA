{"version":3,"sources":["Drawer.tsx"],"names":["React","StyleSheet","I18nManager","Platform","Keyboard","StatusBar","PanGestureHandler","TapGestureHandler","State","Animated","DrawerProgressContext","Clock","Value","onChange","clockRunning","startClock","stopClock","interpolate","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","PROGRESS_EPSILON","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","Drawer","clock","isDrawerTypeFront","props","drawerType","isOpen","open","nextIsOpen","isSwiping","gestureState","UNDETERMINED","touchX","velocityX","gestureX","offsetX","position","containerWidth","drawerWidth","drawerOpacity","drawerPosition","touchDistanceFromDrawer","swipeDistanceThreshold","undefined","swipeVelocityThreshold","currentOpenValue","isStatusBarHidden","manuallyTriggerSpring","transitionTo","toValue","frameTime","state","time","finished","velocity","value","Boolean","toggleDrawer","dragX","onOpen","onClose","pendingOpenValue","forceUpdate","keyboardDismissMode","dismiss","toggleStatusBar","ACTIVE","translateX","progress","handleGestureEvent","nativeEvent","x","translationX","handleGestureStateChange","s","handleTapStateChange","oldState","handleContainerLayout","e","setValue","layout","width","handleDrawerLayout","requestAnimationFrame","hidden","hideStatusBar","statusBarAnimation","setHidden","prevProps","gestureEnabled","swipeEdgeWidth","sceneContainerStyle","drawerStyle","overlayStyle","onGestureRef","renderDrawerContent","renderSceneContent","gestureHandlerProps","right","contentTranslateX","drawerTranslateX","isRTL","offset","hitSlop","left","styles","main","content","transform","overlay","opacity","inputRange","outputRange","zIndex","OS","container","PureComponent","defaultProps","drawerPostion","create","backgroundColor","top","bottom","maxWidth","absoluteFillObject","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  State,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from '../utils/DrawerProgressContext';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  interpolate,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst PROGRESS_EPSILON = 0.05;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  onGestureRef?: (ref: PanGestureHandler | null) => void;\n  gestureEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: ViewStyle;\n  drawerStyle?: ViewStyle;\n  sceneContainerStyle?: ViewStyle;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\nexport default class Drawer extends React.PureComponent<Props> {\n  static defaultProps = {\n    gestureEnabled: true,\n    drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n  }\n\n  private clock = new Clock();\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private gestureState = new Value<number>(State.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(0);\n\n  private containerWidth = new Value<number>(0);\n  private drawerWidth = new Value<number>(0);\n  private drawerOpacity = new Value<number>(0);\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: ReadonlyArray<Binary>) => {\n          const open = Boolean(value);\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: ReadonlyArray<Binary>) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: ReadonlyArray<Binary>) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(eq(s, State.ACTIVE), set(this.manuallyTriggerSpring, TRUE)),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      onGestureRef,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const right = drawerPosition === 'right';\n\n    const contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(this.drawerWidth, DIRECTION_RIGHT)\n          : this.drawerWidth\n        : this.translateX;\n\n    const offset = I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = right\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: open ? undefined : swipeEdgeWidth }\n      : { left: 0, width: open ? undefined : swipeEdgeWidth };\n\n    return (\n      <DrawerProgressContext.Provider value={this.progress}>\n        <PanGestureHandler\n          ref={onGestureRef}\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={gestureEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={styles.main}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                {\n                  transform: [{ translateX: contentTranslateX }],\n                },\n                sceneContainerStyle as any,\n              ]}\n              importantForAccessibility={open ? 'no-hide-descendants' : 'yes'}\n            >\n              {renderSceneContent({ progress: this.progress })}\n              <TapGestureHandler\n                enabled={gestureEnabled}\n                onHandlerStateChange={this.handleTapStateChange}\n              >\n                <Animated.View\n                  style={[\n                    styles.overlay,\n                    {\n                      opacity: interpolate(this.progress, {\n                        inputRange: [PROGRESS_EPSILON, 1],\n                        outputRange: [0, 1],\n                      }),\n                      // We don't want the user to be able to press through the overlay when drawer is open\n                      // One approach is to adjust the pointerEvents based on the progress\n                      // But we can also send the overlay behind the screen, which works, and is much less code\n                      zIndex: cond(\n                        greaterThan(this.progress, PROGRESS_EPSILON),\n                        0,\n                        -1\n                      ),\n                    },\n                    overlayStyle,\n                  ]}\n                />\n              </TapGestureHandler>\n            </Animated.View>\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n            <Animated.View\n              accessibilityViewIsModal={open}\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                right ? { right: offset } : { left: offset },\n                {\n                  transform: [{ translateX: drawerTranslateX }],\n                  opacity: this.drawerOpacity,\n                  zIndex: drawerType === 'back' ? -1 : 0,\n                },\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent({ progress: this.progress })}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n    maxWidth: '100%',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]}